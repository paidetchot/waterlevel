<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ระบบติดตามข้อมูลอ่างเก็บน้ำ</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/public/style.css">
    
    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.2.0/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment"></script>
</head>
<body>

    <div class="container-fluid">
        <!-- Header -->
        <div class="row bg-primary text-white py-4 mb-4">
            <div class="col">
                <h1 class="text-center">
                    <i class="bi bi-water"></i> ระบบติดตามข้อมูลอ่างเก็บน้ำ
                </h1>
                <p class="text-center mb-0">แสดงข้อมูลเรียลไทม์จากกรมชลประทาน</p>
            </div>
        </div>

       <!-- Stats Overview -->

<div class="row mb-4 g-3">
    <div class="col-md-3">
        <div id="totalDams" class="card stats-card">
          
        </div>
    </div>
    <div id="stats-container" class="mb-4">
        
    </div>
    <div class="col-md-3">
        <div id="totalVolume" class="card stats-card">
         
        </div>
    </div>
    <div class="col-md-3">
        <div id="highDams" class="card stats-card">
        
        </div>
    </div>
    <div class="col-md-3">
        <div id="lowDams" class="card stats-card">
        
        </div>
    </div>
</div>

        <!-- Filter Buttons -->
<div class="row mb-4">
    <div class="col">
        <div class="btn-group w-100 flex-wrap gap-2 justify-content-center" role="group">
            <button type="button" class="btn btn-lg btn-outline-primary" onclick="filterDams('all')">
                <i class="bi bi-funnel"></i> ทั้งหมด
            </button>
            <button type="button" class="btn btn-lg btn-outline-danger" onclick="filterDams('น้ำล้น')">
                <i class="bi bi-tsunami"></i> น้ำล้น
            </button>
            <button type="button" class="btn btn-lg btn-outline-danger" onclick="filterDams('น้ำมาก')">
                <i class="bi bi-water"></i> น้ำมาก
            </button>
            <button type="button" class="btn btn-lg btn-outline-success" onclick="filterDams('น้ำปกติ')">
                <i class="bi bi-check-circle"></i> น้ำปกติ
            </button>
            <button type="button" class="btn btn-lg btn-outline-warning" onclick="filterDams('น้ำน้อย')">
                <i class="bi bi-exclamation-circle"></i> น้ำน้อย
            </button>
            <button type="button" class="btn btn-lg btn-outline-dark" onclick="filterDams('น้ำวิกฤต')">
                <i class="bi bi-exclamation-triangle"></i> น้ำวิกฤต
            </button>
        </div>
    </div>
</div>

        <!-- Dams Grid -->
        <div id="damData" class="row"></div>
    </div>

    <script>
        const socket = io('http://localhost:5001');
        let currentFilter = 'all';
        let damsData = [];
        let charts = {};
        
         // เพิ่มฟังก์ชันสำหรับ refresh แต่ละ block
         function refreshBlock(damId) {
            const blockElement = document.querySelector(`[data-dam-id="${damId}"]`);
            if (blockElement) {
                // เพิ่ม loading indicator
                const loadingSpinner = document.createElement('div');
                loadingSpinner.className = 'position-absolute w-100 h-100 d-flex justify-content-center align-items-center bg-white bg-opacity-75';
                loadingSpinner.innerHTML = '<div class="spinner-border text-primary"></div>';
                blockElement.appendChild(loadingSpinner);
                
                fetch('http://localhost:5001/api/dams')
                    .then(response => response.json())
                    .then(data => {
                        if (data.data) {
                            const damData = data.data.find(d => d.id === damId);
                            if (damData) {
                                updateSingleDamBlock(blockElement, damData);
                            }
                        }
                        loadingSpinner.remove();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        loadingSpinner.remove();
                    });
            }
        }
        // อัพเดทเฉพาะ block ที่ต้องการ
        function updateSingleDamBlock(blockElement, damData) {
    try {
        // อัพเดทข้อมูลทีละส่วน
        blockElement.querySelector('.volume').textContent = Number(damData.volume).toLocaleString();
        blockElement.querySelector('.inflow').textContent = Number(damData.inflow).toLocaleString();
        blockElement.querySelector('.outflow').textContent = Number(damData.outflow).toLocaleString();

        const progressBar = blockElement.querySelector('.progress-bar');
        progressBar.style.width = `${damData.percent_storage}%`;
        progressBar.textContent = `${damData.percent_storage.toFixed(2)}%`;
        progressBar.className = `progress-bar ${getStatusColor(damData.status)}`;

        blockElement.querySelector('.update-time').textContent = 
            new Date(damData.updated_at).toLocaleString('th-TH');
    } catch (error) {
        console.error('Error updating block:', error);
    }
}


        // Socket Connection
        socket.on('connect', () => {
            console.log('Connected to server');
        });

        socket.on('connect_error', (error) => {
            console.error('Connection error:', error);
        });

        // Initial Data Load
        fetch('http://localhost:5001/api/dams')
            .then(response => response.json())
            .then(data => {
                if (data.data) {
                    damsData = data.data;
                    updateDashboard();
                }
            })
            .catch(error => console.error('Error:', error));

        // Real-time Updates
        socket.on('dam_data_update', (data) => {
            damsData = data;
            updateDashboard();
        });

        function updateDashboard() {
            updateStats();
            updateDamsGrid();
        }

        function updateStats() {
    const totalDams = damsData.length;
    const totalVolume = damsData.reduce((sum, dam) => sum + dam.volume, 0);
    
    // นับจำนวนเขื่อนแยกตามสถานะ
    const waterStats = {
        'น้ำล้น': 0,
        'น้ำมาก': 0,
        'น้ำปกติ': 0,
        'น้ำน้อย': 0,
        'น้ำวิกฤต': 0
    };

    damsData.forEach(dam => {
        if (waterStats.hasOwnProperty(dam.status)) {
            waterStats[dam.status]++;
        }
    });

    // อัพเดท UI
    const statsElements = [
        {
            id: 'totalDams',
            value: totalDams,
            icon: 'bi-water',
            label: 'จำนวนเขื่อนทั้งหมด',
            color: 'primary'
        },
        {
            id: 'totalVolume',
            value: Math.round(totalVolume).toLocaleString(),
            icon: 'bi-moisture',
            label: 'ปริมาณน้ำรวม (ล้าน ลบ.ม.)',
            color: 'info'
        },
        {
            id: 'overflowDams',
            value: waterStats['น้ำล้น'],
            icon: 'bi-tsunami',
            label: 'น้ำล้น',
            color: 'danger'
        },
        {
            id: 'highDams',
            value: waterStats['น้ำมาก'],
            icon: 'bi-exclamation-triangle',
            label: 'น้ำมาก',
            color: 'danger'
        },
        {
            id: 'normalDams',
            value: waterStats['น้ำปกติ'],
            icon: 'bi-check-circle',
            label: 'น้ำปกติ',
            color: 'success'
        },
        {
            id: 'lowDams',
            value: waterStats['น้ำน้อย'],
            icon: 'bi-exclamation-circle',
            label: 'น้ำน้อย',
            color: 'warning'
        },
        {
            id: 'criticalDams',
            value: waterStats['น้ำวิกฤต'],
            icon: 'bi-exclamation-diamond',
            label: 'น้ำวิกฤต',
            color: 'dark'
        }
    ];

    // สร้าง HTML สำหรับแถวใหม่
    let statsHTML = '<div class="row g-3">';
    
    // แถวแรก: ข้อมูลรวม
    statsHTML += `
        <div class="col-md-6">
            <div class="card stats-card h-100 ${statsElements[0].id}" id="${statsElements[0].id}">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <i class="bi ${statsElements[0].icon} display-4 text-${statsElements[0].color} me-3"></i>
                        <div>
                            <h5 class="card-title">${statsElements[0].label}</h5>
                            <h2 class="mb-0 text-${statsElements[0].color}">${statsElements[0].value}</h2>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card stats-card h-100 ${statsElements[1].id}" id="${statsElements[1].id}">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <i class="bi ${statsElements[1].icon} display-4 text-${statsElements[1].color} me-3"></i>
                        <div>
                            <h5 class="card-title">${statsElements[1].label}</h5>
                            <h2 class="mb-0 text-${statsElements[1].color}">${statsElements[1].value}</h2>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;

    // แถวที่สอง: สถานะน้ำ
    statsHTML += `
        <div class="col-12">
            <div class="card stats-card">
                <div class="card-body">
                    <h5 class="card-title mb-3">สถานะเขื่อน</h5>
                    <div class="row g-2">
    `;
    
    // เพิ่มสถานะน้ำแต่ละประเภท
    statsElements.slice(2).forEach(stat => {
        statsHTML += `
            <div class="col">
                <div class="p-3 border rounded text-center h-100" id="${stat.id}">
                    <i class="bi ${stat.icon} text-${stat.color} h3 mb-2"></i>
                    <div class="small text-muted">${stat.label}</div>
                    <h3 class="mb-0 text-${stat.color}">${stat.value}</h3>
                </div>
            </div>
        `;
    });

    statsHTML += `
                    </div>
                </div>
            </div>
        </div>
    `;
    
    statsHTML += '</div>';

    // อัพเดท DOM
    const statsContainer = document.getElementById('stats-container');
    statsContainer.innerHTML = statsHTML;

    // เพิ่ม animation
    document.querySelectorAll('.stats-card, .border.rounded').forEach(card => {
        card.classList.add('refresh-animation');
        setTimeout(() => card.classList.remove('refresh-animation'), 1000);
    });
}   
        function filterDams(status) {           
            currentFilter = status;
            updateDamsGrid();
        }

        function updateDamsGrid() {
    const damDataDiv = document.getElementById('damData');
    damDataDiv.innerHTML = '';

    const filteredDams = damsData.filter(dam => {
        if (currentFilter === 'all') return true;
        return dam.status === currentFilter;
    });

    filteredDams.forEach(dam => {
        const card = `
            <div class="col-md-4 mb-4">
                <div class="card position-relative shadow-sm" data-dam-id="${dam.id}">
                     <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="card-title mb-0">
                                <i class="bi bi-water me-2"></i>${dam.name}
                            </h5>
                            <small>
                                <i class="bi bi-geo-alt me-1"></i>${dam.region}
                            </small>
                        </div>
                        <button class="btn btn-sm btn-light" onclick="showHistoryDialog('${dam.id}')">
                            <i class="bi bi-graph-up"></i> ดูกราฟ
                        </button>
                     </div>
                    <div class="card-body">
                        <div class="current-data mb-3">
                            <div class="row g-3">
                                <div class="col-6">
                                    <div class="p-2 border rounded bg-light">
                                        <small class="text-muted d-block mb-1">
                                            <i class="bi bi-water me-1"></i>ความจุ
                                        </small>
                                        <div class="h6 mb-0">${Number(dam.capacity).toLocaleString()} ล้าน ลบ.ม.</div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="p-2 border rounded bg-light">
                                        <small class="text-muted d-block mb-1">
                                            <i class="bi bi-moisture me-1"></i>ปริมาณน้ำ
                                        </small>
                                        <div class="h6 mb-0">
                                            <span class="volume">${Number(dam.volume).toLocaleString()}</span> ล้าน ลบ.ม.
                                        </div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="p-2 border rounded bg-light">
                                        <small class="text-muted d-block mb-1">
                                            <i class="bi bi-arrow-down me-1"></i>น้ำไหลเข้า
                                        </small>
                                        <div class="h6 mb-0">
                                            <span class="inflow">${Number(dam.inflow).toLocaleString()}</span> ล้าน ลบ.ม.
                                        </div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="p-2 border rounded bg-light">
                                        <small class="text-muted d-block mb-1">
                                            <i class="bi bi-arrow-up me-1"></i>น้ำระบาย
                                        </small>
                                        <div class="h6 mb-0">
                                            <span class="outflow">${Number(dam.outflow).toLocaleString()}</span> ล้าน ลบ.ม.
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="status-section mb-3">
                            <div class="progress" style="height: 25px;">
                                <div class="progress-bar ${getStatusColor(dam.status)}"
                                     role="progressbar"
                                     style="width: ${dam.percent_storage}%"
                                     aria-valuenow="${dam.percent_storage}"
                                     aria-valuemin="0"
                                     aria-valuemax="100">
                                    <strong>${dam.percent_storage.toFixed(2)}%</strong>
                                </div>
                            </div>
                            <div class="d-flex justify-content-end mt-1">
                                <span class="badge ${getStatusColor(dam.status)}">${dam.status}</span>
                            </div>
                        </div>

                        <small class="text-muted d-block text-end mt-2">
                            <i class="bi bi-clock me-1"></i>อัพเดทล่าสุด: ${new Date(dam.updated_at).toLocaleString('th-TH')}
                        </small>
                    </div>
                </div>
            </div>
        `;
        damDataDiv.innerHTML += card;
    });
}
let historyModal;
let currentDamId;
let historyChart;

// แก้ไข Modal HTML
document.body.insertAdjacentHTML('beforeend', `
    <div class="modal fade" id="historyModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">ข้อมูลย้อนหลัง</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <!-- เพิ่มส่วนเลือกวันที่ -->
                    <div class="mb-3">
                        <div class="row g-2 align-items-center">
                            <div class="col-auto">
                                <label class="form-label mb-0">ช่วงวันที่</label>
                            </div>
                            <div class="col">
                                <div class="input-group">
                                    <input type="date" class="form-control" id="startDate">
                                    <span class="input-group-text">ถึง</span>
                                    <input type="date" class="form-control" id="endDate">
                                    <button class="btn btn-primary" onclick="updateHistoryGraph()">
                                        <i class="bi bi-search"></i> ค้นหา
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="chart-container position-relative" style="height:60vh;">
                        <canvas id="historyChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
`);

// เมื่อโหลดหน้าเว็บ
document.addEventListener('DOMContentLoaded', function() {
    historyModal = new bootstrap.Modal(document.getElementById('historyModal'));
    
    // ตั้งค่าวันที่เริ่มต้นเป็น 7 วันย้อนหลัง
    const endDate = new Date();
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 7);
    
    document.getElementById('startDate').valueAsDate = startDate;
    document.getElementById('endDate').valueAsDate = endDate;
});

// แก้ไขฟังก์ชัน showHistoryDialog
async function showHistoryDialog(damId) {
    currentDamId = damId;
    
    // ตั้งค่าวันที่เริ่มต้น (7 วันย้อนหลัง)
    const endDate = new Date();         
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 7);
    
    document.getElementById('startDate').valueAsDate = startDate;
    document.getElementById('endDate').valueAsDate = endDate;
    
    historyModal.show();
    await updateHistoryGraph();
}

// เพิ่มฟังก์ชันอัพเดทกราฟตามช่วงวันที่
async function updateHistoryGraph() {
    try {
        if (historyChart) {
            historyChart.destroy();
        }

        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;

        // แสดง loading
        const chartContainer = document.querySelector('.chart-container');
        chartContainer.innerHTML = `
            <div class="d-flex justify-content-center align-items-center h-100">
                <div class="spinner-border text-primary"></div>
            </div>
        `;

        // เรียก API แบบระบุช่วงวันที่
        const response = await fetch(`http://localhost:5001/api/dams/${currentDamId}/history?start=${startDate}&end=${endDate}`);
        const data = await response.json();

        if (data.status === 'ok' && data.data.length > 0) {
            // สร้าง canvas ใหม่
            chartContainer.innerHTML = '<canvas id="historyChart"></canvas>';
            const ctx = document.getElementById('historyChart').getContext('2d');

            historyChart = new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{ // ไม่ใช้ labels แต่ใส่ค่า x ใน data แทน
            label: 'ปริมาณน้ำ (ล้าน ลบ.ม.)',
            data: data.data.map(d => ({
                x: new Date(d.recorded_at), // เก็บเวลาใน x
                y: d.volume // เก็บค่าใน y
            })),
            borderColor: '#2196f3',
            backgroundColor: 'rgba(33, 150, 243, 0.1)',
            yAxisID: 'volume',
            fill: true
        }, {
            label: 'เปอร์เซ็นต์',
            data: data.data.map(d => ({
                x: new Date(d.recorded_at),
                y: d.percent_storage
            })),
            borderColor: '#4caf50',
            backgroundColor: 'rgba(76, 175, 80, 0.1)',
            yAxisID: 'percentage',
            fill: true
        }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        interaction: {
            mode: 'index',
            intersect: false
        },
        scales: {
            x: {
                type: 'time', // กำหนดให้เป็น time scale
                time: {
                    unit: 'minute', // แสดงเป็นนาที
                    displayFormats: {
                        minute: 'HH:mm', // format การแสดงเวลา
                        hour: 'HH:mm',
                        day: 'DD/MM'
                    },
                    tooltipFormat: 'DD/MM/YYYY HH:mm' // format ใน tooltip
                },
                grid: {
                    color: 'rgba(0,0,0,0.05)'
                },
                ticks: {
                    maxRotation: 0,
                    autoSkip: true,
                    maxTicksLimit: 20 // จำนวนจุดบนแกน x
                }
            },
            volume: {
                type: 'linear',
                position: 'left',
                title: {
                    display: true,
                    text: 'ปริมาณน้ำ (ล้าน ลบ.ม.)'
                },
                grid: {
                    color: 'rgba(0,0,0,0.05)'
                }
            },
            percentage: {
                type: 'linear',
                position: 'right',
                min: 0,
                max: 100,
                title: {
                    display: true,
                    text: 'เปอร์เซ็นต์'
                },
                grid: {
                    drawOnChartArea: false
                }
            }
        },
        plugins: {
            tooltip: {
                callbacks: {
                    title: function(context) {
                        return new Date(context[0].parsed.x).toLocaleString('th-TH', {
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        });
                    },
                    label: function(context) {
                        let label = context.dataset.label || '';
                        if (label) {
                            label += ': ';
                        }
                        if (context.parsed.y !== null) {
                            label += context.parsed.y.toLocaleString();
                            if (context.dataset.yAxisID === 'percentage') {
                                label += '%';
                            }
                        }
                        return label;
                    }
                }
            }
        }
    }
});
        } else {
            chartContainer.innerHTML = `
                <div class="alert alert-info m-3">
                    <i class="bi bi-info-circle me-2"></i>ไม่พบข้อมูลในช่วงวันที่ที่เลือก
                </div>
            `;
        }
    } catch (error) {
        console.error('Error updating history graph:', error);
        document.querySelector('.chart-container').innerHTML = `
            <div class="alert alert-danger m-3">
                <i class="bi bi-exclamation-triangle me-2"></i>เกิดข้อผิดพลาดในการโหลดข้อมูล
            </div>
        `;
    }
}


function getStatusColor(status) {
    switch(status) {
        case 'น้ำล้น':
            return 'bg-danger';
        case 'น้ำมาก':
            return 'bg-danger';
        case 'น้ำปกติ':
            return 'bg-success';  // แก้จาก warning เป็น success
        case 'น้ำน้อย':
            return 'bg-warning';  // แก้จาก success เป็น warning
        case 'น้ำวิกฤต':
            return 'bg-dark';
        default:
            return 'bg-secondary';
    }
}

// แก้ไข setInterval พร้อมเพิ่ม error handling
let lastRefreshTime = Date.now();

const refreshData = async () => {
    try {
        // Refresh blocks
        const blocks = document.querySelectorAll('[data-dam-id]');
        const refreshPromises = Array.from(blocks).map(block => {
            const damId = block.dataset.damId;
            return refreshBlock(damId);
        });

        // รอให้ทุก block refresh เสร็จ
        await Promise.all(refreshPromises);

        // Refresh stats
        const response = await fetch('http://localhost:5001/api/dams');
        const data = await response.json();
        if (data.data) {
            updateStats();
        }

        lastRefreshTime = Date.now();
    } catch (error) {
        console.error('Error refreshing data:', error);
        // แสดงข้อความแจ้งเตือนถ้าเกิดข้อผิดพลาด
        showErrorAlert('เกิดข้อผิดพลาดในการอัพเดทข้อมูล กรุณารีเฟรชหน้าเว็บ');
    }
};

// ปรับปรุง setInterval
setInterval(() => {
    const now = Date.now();
    if (now - lastRefreshTime >= 360000) { // 6 นาที
        refreshData();
    }
}, 10000); 


        
    </script>
</body>
</html>